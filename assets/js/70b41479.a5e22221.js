"use strict";(self.webpackChunknvchad_site=self.webpackChunknvchad_site||[]).push([[177],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),s=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(o.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(t),d=i,k=c["".concat(o,".").concat(d)]||c[d]||m[d]||l;return t?a.createElement(k,r(r({ref:n},u),{},{components:t})):a.createElement(k,r({ref:n},u))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=c;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p.mdxType="string"==typeof e?e:i,r[1]=p;for(var s=2;s<l;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},680:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var a=t(7462),i=(t(7294),t(3905));const l={},r="Mappings",p={unversionedId:"config/Mappings",id:"config/Mappings",title:"Mappings",description:"- list of some important mappings!",source:"@site/docs/config/Mappings.md",sourceDirName:"config",slug:"/config/Mappings",permalink:"/config/Mappings",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Custom config",permalink:"/config/Custom config"},next:{title:"Lsp stuff",permalink:"/config/Lsp stuff"}},o={},s=[{value:"Navigate in insert mode",id:"navigate-in-insert-mode",level:2},{value:"Switch windows",id:"switch-windows",level:2},{value:"Misc",id:"misc",level:2},{value:"NvChad",id:"nvchad",level:2},{value:"Terminal",id:"terminal",level:2},{value:"NvimTree",id:"nvimtree",level:2},{value:"Mapping format",id:"mapping-format",level:2},{value:"Default opts values",id:"default-opts-values",level:3},{value:"Mappings table structure",id:"mappings-table-structure",level:2},{value:"Override default mappings &amp; create mappings",id:"override-default-mappings--create-mappings",level:2},{value:"Mapping with which-key disabled",id:"mapping-with-which-key-disabled",level:2}],u={toc:s};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"mappings"},"Mappings"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"list of some important mappings!"),(0,i.kt)("li",{parentName:"ul"},"C = Ctrl"),(0,i.kt)("li",{parentName:"ul"},"leader = space"),(0,i.kt)("li",{parentName:"ul"},"A = alt"),(0,i.kt)("li",{parentName:"ul"},"S = shift")),(0,i.kt)("h2",{id:"navigate-in-insert-mode"},"Navigate in insert mode"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C + h/j/k/l")," - move cursor"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C + a")," - beginning of the line"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C + e")," -  end of the line")),(0,i.kt)("h2",{id:"switch-windows"},"Switch windows"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C + h")," - switch left window"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C + j")," - switch bottom window"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C + k")," - switch top window"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C + l")," - switch right window")),(0,i.kt)("h2",{id:"misc"},"Misc"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C + s")," - save"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"S + b")," - new buffer"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"leader + n")," - toggle number line"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"leader + rn")," - toggle relative number line")),(0,i.kt)("h2",{id:"nvchad"},"NvChad"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"leader + uu")," - update nvchad"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"leader + th")," - change themes")),(0,i.kt)("h2",{id:"terminal"},"Terminal"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"A + i")," - toggle floating terminal"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"A + h")," - toggle horizontal terminal"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"A + v")," - toggle vertical terminal"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"leader + h")," - new horizontal terminal"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"leader + v")," - new vertical terminal")),(0,i.kt)("h2",{id:"nvimtree"},"NvimTree"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C + n")," - toggle NvimTree")),(0,i.kt)("p",null,"(Note check the rest of the mappings by running :Telescope keymaps)"),(0,i.kt)("h1",{id:"customization"},"Customization"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Defaults are defined in ",(0,i.kt)("inlineCode",{parentName:"li"},"core.mappings")," (core/mappings.lua), which you should familiarize yourself with"),(0,i.kt)("li",{parentName:"ul"},"User mappings should be defined in the ",(0,i.kt)("inlineCode",{parentName:"li"},"mappings")," field of the table returned by ",(0,i.kt)("inlineCode",{parentName:"li"},"custom.chadrc")," (these can be required from another file, e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},'M.mappings = require "custom.mappings"'),")")),(0,i.kt)("h2",{id:"mapping-format"},"Mapping format"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- general format\n\n-- opts here is completely optional\n\n ["keys"] = {"action", "icon  mapping description", opts = {}},\n ["keys"] = {"action",  opts = {}}, -- non whichkey users\n\n\n -- examples\n\n ["<C-n>"] = {"<cmd> NvimTreeToggle <CR>", "Toggle nvimtree", opts = {}},\n\n ["<C-s>"] = { "<cmd> w <CR>", "\ufb1a  save file" },\n\n ["<leader>uu"] = { "<cmd> :NvChadUpdate <CR>", "\uf135  update nvchad" },\n\n -- example with lua function\n ["<leader>tt"] = {\n     function()\n        require("base46").toggle_theme()\n     end,\n        "\uf205   toggle theme",\n   },\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The mapping description is required for ",(0,i.kt)("inlineCode",{parentName:"li"},"WhichKey")," ",(0,i.kt)("a",{parentName:"li",href:"#mapping-with-which-key-disabled"},"but this can be disabled")),(0,i.kt)("li",{parentName:"ul"},"As shown above, you can use lua functions in the mappings (e.g., to call lua modules)"),(0,i.kt)("li",{parentName:"ul"},"Icons are visually appealing and help readability, but they are optional",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Best practice: place icons before the textual description, separated by 2-3 spaces"),(0,i.kt)("li",{parentName:"ul"},"Tip: ",(0,i.kt)("a",{parentName:"li",href:"https://www.nerdfonts.com/cheat-sheet"},"Find icons to copy/paste at https://www.nerdfonts.com/cheat-sheet"))))),(0,i.kt)("h3",{id:"default-opts-values"},"Default opts values"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"{\n  buffer = nil, -- Global mappings. Specify a buffer number for buffer local mappings\n  silent = true, \n  noremap = true,\n  nowait = false,\n\n  -- all standard key binding opts are supported \n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Note : This is completely optional")),(0,i.kt)("h2",{id:"mappings-table-structure"},"Mappings table structure"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This is the mappings structure of core.mappings and your mappings file")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local M = {}\n\n-- add this table only when you want to disable default keys\nM.disabled = {\n  n = {\n      ["<leader>h"] = "",\n      ["<C-s>"] = ""\n  }\n}\n\nM.abc = {\n\n  n = {\n     ["<C-n>"] = {"<cmd> Telescope <CR>", "Open Telescope"}\n  }\n\n -- non which key users\n  n = {\n     ["<C-n>"] = {"<cmd> Telescope <CR>"}\n  }\n\n\n  i = {\n    -- more keys!\n  }\n}\n\nM.xyz = {\n  -- stuff\n}\n\nreturn M\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"abc")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"xyz")," above are arbitrary; they could, for example, be a plugin's name"),(0,i.kt)("li",{parentName:"ul"},"n, i, v, are the mode names, i.e., normal, insert, visual"),(0,i.kt)("li",{parentName:"ul"},"Be sure to maintain a table structure similar to core.mappings ")),(0,i.kt)("h2",{id:"override-default-mappings--create-mappings"},"Override default mappings & create mappings"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"lets override nvimtree's mappings")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- chadrc\nM.mappings = require "custom.mappings"\n\n-- the above path can be any file in custom dir, just an example!\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- custom.mappings\n\nlocal M = {}\n\nM.nvimtree = {\n   n = {\n      ["<leader>ff"] = { "<cmd> NvimTreeToggle <CR>", "\uf413   toggle nvimtree" },\n      ["<C-n>"] = { "<cmd> Telescope <CR>", "open telescope" },\n   },\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Check ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/siduck/dotfiles/blob/master/nvchad/custom/mappings.lua"},"siduck's config")," for reference"),(0,i.kt)("li",{parentName:"ul"},"The same way you can add your mappings :)")),(0,i.kt)("h2",{id:"mapping-with-which-key-disabled"},"Mapping with which-key disabled"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The method's just the same but in this you dont have to write the mappings description!"),(0,i.kt)("li",{parentName:"ul"},"Also put this into your custom.init.lua file :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},' require("core.utils").load_mappings()\n')))}m.isMDXComponent=!0}}]);