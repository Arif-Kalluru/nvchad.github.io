"use strict";(self.webpackChunknvchad_site=self.webpackChunknvchad_site||[]).push([[866],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>p});var l=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=l.createContext({}),c=function(e){var n=l.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return l.createElement(s.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},m=l.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(t),p=r,d=m["".concat(s,".").concat(p)]||m[p]||f[p]||a;return t?l.createElement(d,i(i({ref:n},u),{},{components:t})):l.createElement(d,i({ref:n},u))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<a;c++)i[c]=t[c];return l.createElement.apply(null,i)}return l.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6878:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var l=t(7462),r=(t(7294),t(3905));const a={},i=void 0,o={unversionedId:"config/Format & lint",id:"config/Format & lint",title:"Format & lint",description:"- There are many plugins for this , I will use null-ls.nvim in this example!",source:"@site/docs/config/Format & lint.md",sourceDirName:"config",slug:"/config/Format & lint",permalink:"/config/Format & lint",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Lsp stuff",permalink:"/config/Lsp stuff"},next:{title:"Tips & tricks",permalink:"/config/Tricks"}},s={},c=[{value:"Install null-ls",id:"install-null-ls",level:3},{value:"Null-ls config",id:"null-ls-config",level:3}],u={toc:c};function f(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,l.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"There are many plugins for this , I will use null-ls.nvim in this example!")),(0,r.kt)("h3",{id:"install-null-ls"},"Install null-ls"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},' ["jose-elias-alvarez/null-ls.nvim"] = {\n      after = "nvim-lspconfig",\n      config = function()\n         require("custom.plugins.null-ls").setup()\n      end,\n }\n\n-- load it after nvim-lspconfig cuz we lazy loaded lspconfig\n')),(0,r.kt)("h3",{id:"null-ls-config"},"Null-ls config"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"NOTE : The below config is my personal one! So use it as a reference or check null-ls docs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local null_ls = require "null-ls"\nlocal b = null_ls.builtins\n\nlocal sources = {\n\n   b.formatting.prettierd.with { filetypes = { "html", "markdown", "css" } },\n   b.formatting.deno_fmt,\n\n   -- Lua\n   b.formatting.stylua,\n   b.diagnostics.luacheck.with { extra_args = { "--global vim" } },\n\n   -- Shell\n   b.formatting.shfmt,\n   b.diagnostics.shellcheck.with { diagnostics_format = "#{m} [#{c}]" },\n}\n\nlocal M = {}\n\nM.setup = function()\n   null_ls.setup {\n      debug = true,\n      sources = sources,\n\n      -- format on save\n      on_attach = function(client)\n         if client.resolved_capabilities.document_formatting then\n            vim.cmd "autocmd BufWritePre <buffer> lua vim.lsp.buf.formatting_sync()"\n         end\n      end,\n   }\nend\n\nreturn M\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Format code : ",(0,r.kt)("inlineCode",{parentName:"li"},"<leader> + fm")),(0,r.kt)("li",{parentName:"ul"},"Check ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/doc/BUILTINS.md"},"null-ls builtins")," to get config for your language!"),(0,r.kt)("li",{parentName:"ul"},"Also note that in the above example I've added some config of linters and formatters in null-ls config, so those programs must be installed on my system as well! Like prettierd, stylua, shfmt, eslint_d etc.")))}f.isMDXComponent=!0}}]);